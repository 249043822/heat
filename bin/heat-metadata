#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Heat Metadata Server.

This makes the instance metadata accessible both to the instance and Heat Engine.
"""

import gettext
import os
import sys

# If ../heat/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'heat', '__init__.py')):
    sys.path.insert(0, possible_topdir)

gettext.install('heat', unicode=1)

import logging
from heat import rpc
from heat.common import config
from heat.common import wsgi
from heat import context
from paste import httpserver
from socket import gethostbyname, gethostname

LOG = logging.getLogger('heat.metadata')


def send_address_to_engine(port):
    host = gethostbyname(gethostname())
    con = context.get_admin_context()
    resp = rpc.call(con, 'engine',
                    {'method': 'metadata_register_address',
                     'args': {'url': 'http://%s:%s' % (host, port)}})


if __name__ == '__main__':
    try:
        conf = config.HeatMetadataConfigOpts()
        conf()
        config.FLAGS = conf
        rpc.configure(conf)
        config.setup_logging(conf)

        app = config.load_paste_app(conf)

        port = conf.bind_port
        send_address_to_engine(port)
        LOG.info(('Starting Heat Metadata on port %s') % port)
        httpserver.serve(app, port=port)
    except RuntimeError, e:
        sys.exit("ERROR: %s" % e)
