#!/usr/bin/python
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Implements cfn-init CloudFormation functionality

Resource metadata currently implemented:
    * config/packages
    * config/services

Not implemented yet:
    * config sets
    * config/sources
    * config/commands
    * config/files
    * config/users
    * config/groups
    * command line args
      - placeholders are ignored
"""

import argparse
import logging
import os
import sys


if os.path.exists('/opt/aws/bin'):
    sys.path.insert(0, '/opt/aws/bin')
    from cfn_helper import *
else:
    from heat.cfntools.cfn_helper import *

logger = logging.getLogger('cfn-init')
log_file_name = "/var/log/cfn-init.log"
log_format = '%(levelname)s [%(asctime)s] %(message)s'
file_handler = logging.FileHandler(log_file_name)
file_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(file_handler)
logging.basicConfig(format=log_format, level=logging.DEBUG)

description = " "
parser = argparse.ArgumentParser(description=description)
parser.add_argument('-s', '--stack',
        dest="stack_name",
        help="A Heat stack name",
        required=False)
parser.add_argument('-r', '--resource',
        dest="logical_resource_id",
        help="A Heat logical resource ID",
        required=False)
parser.add_argument('--access-key',
        dest="access_key",
        help="A Keystone access key",
        required=False)
parser.add_argument('--secret-key',
        dest="secret_key",
        help="A Keystone secret key",
        required=False)
parser.add_argument('--region',
        dest="region",
        help="Openstack region",
        required=False)
args = parser.parse_args()
# FIXME: implement real arg

metadata = Metadata(args.stack_name,
                    args.logical_resource_id,
                    access_key=args.access_key,
                    secret_key=args.secret_key,
                    region=args.region)
metadata.retrieve()
try:
    metadata.cfn_init()
except Exception as e:
    logger.exception("Error processing metadata")
    exit(1)
